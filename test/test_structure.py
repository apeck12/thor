
"""
Tests: src/python/structure.py
"""

import mdtraj
import numpy as np
from numpy.testing import (assert_almost_equal, assert_array_almost_equal,
                           assert_allclose, assert_array_equal)

from thor import structure
from thor.testing import skip, ref_file


@skip
def test_atomic_to_density_1():
    
    grid_dimensions = (25,) * 3
    grid_spacing    = 0.5
    traj = mdtraj.load(ref_file('square.pdb'))
    
    # Reference generated by CCTBX : mmtbx.real_space.sampled_model_density()
    ref = np.load(ref_file('density_square.npy'))
    #ref /= ref.max()
    
    tst1 = structure.atomic_to_density(traj, grid_dimensions, 
                                       grid_spacing, radial_cutoff=3.0)
    #tst1 /= tst1.max()
    tst2 = structure.atomic_to_density(traj, grid_dimensions, 
                                       grid_spacing, radial_cutoff=None)
    #tst2 /= tst2.max()
                             
    from matplotlib import pyplot as plt
    
    
    
    # plt.figure()
    # plt.scatter(ref, tst1)
    # plt.show()
    
    
    # NEXT STEP IS TO VISUALIZE BOTH
    from mayavi import mlab
    mlab.contour3d(ref, transparent=True)
    mlab.contour3d(tst1, transparent=True)
    mlab.show()
    
                             
    assert_allclose(ref, tst1)


def test_atomic_to_density_2():
    """
    Make sure changing the grid spacing parameters doesnt change the results
    """
    
    traj = mdtraj.load(ref_file('square.pdb'))
    
    tst1 = structure.atomic_to_density(traj, (50,) *3, 0.2)
    tst2 = structure.atomic_to_density(traj, (100,)*3, 0.1)
                             
    assert_allclose(tst1, tst2[::2,::2,::2])
    